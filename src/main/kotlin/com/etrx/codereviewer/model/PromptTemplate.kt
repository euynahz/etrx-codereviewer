package com.etrx.codereviewer.model

/**
 * Template configuration for code review prompts
 */
data class PromptTemplate(
    val name: String,
    val template: String,
    val description: String = "",
    val isDefault: Boolean = false
) {
    companion object {
        const val CODE_PLACEHOLDER = "{code}"

        val DEFAULT_TEMPLATE = PromptTemplate(
            name = "简洁代码评审",
            template = """对以下代码变更进行快速评审，重点关注关键问题。

要求：
1. 简洁明了，只指出重要问题
2. 每个问题控制在3-4句话内
3. 优化建议要具体可执行
4. 如果代码质量良好，简单说明即可
5. 避免过度解释和冗长描述

输出格式（Markdown）：

## 📝 评审总结
[一句话简短总结代码质量（100字以内），关注重点问题]

## 🔍 发现的问题
[如果有问题，用简短条目列出，没有问题则写"未发现明显问题"]

## 💡 优化建议
[针对问题的具体建议，没有则写"代码质量良好"]

代码变更：
$CODE_PLACEHOLDER""",
            description = "快速简洁的代码评审，专注关键问题",
            isDefault = true
        )

        val DETAILED_TEMPLATE = PromptTemplate(
            name = "详细代码评审",
            template = """请对以下代码变更进行详细的代码审查，关注代码质量、安全性、性能、最佳实践等方面。请提供具体的改进建议。

输出格式：
请以Markdown格式输出代码审查报告，不要附带额外信息，不要使用markdown包裹，包含以下内容：
- 问题描述和优化建议(如果有)：列出代码中存在的问题，简要说明其影响，并给出优化建议；
- 没有问题就不要赘述；
- 直接返回Markdown内容，不要出现任何包裹；

返回示例：
## 代码评审件报告
// 简短的评审总结
### 问题&优化建议
//按要求按条目描述问题和优化建议

代码变更：
$CODE_PLACEHOLDER""",
            description = "传统详细的代码评审，适合需要全面分析的场景"
        )

        val BE_TEMPLATE = PromptTemplate(
            name = "后端代码评审",
            template = """你是一位资深的软件开发工程师，专注于代码的规范性、功能性、安全性和稳定性。本次任务是对员工的代码进行审查，具体要求如下：
1. 检查是否遵循统一的代码规范（如阿里Java开发手册），类、方法、变量命名是否规范、语义清晰，缩进、空格、注释等格式是否统一。
2. 检查包结构是否合理，分层是否清晰，是否存在单体过大、职责不清的类或方法，是否有重复代码，是否合理抽象和复用。
3. 检查Controller层接口参数、返回值是否规范，是否有统一的响应结构，是否有必要的接口文档注释（如Swagger），且不做业务逻辑处理。
4. 检查Service层是否只处理业务逻辑，事务管理是否合理，是否有事务边界，业务异常是否有统一处理。
5. 检查SQL语句是否安全、性能合理，是否防止SQL注入。
6. 分析代码的性能表现，评估是否存在资源浪费或性能瓶颈。
7. 检查是否防止常见安全漏洞（如XSS、CSRF、SQL注入等），日志中是否避免敏感信息泄露。
8. 检查是否有缓存机制，热点数据是否合理缓存，是否有异步处理、限流、降级等措施，是否有批量处理、分页查询等优化。
9. 检查代码是否易读、易维护，是否有必要的注释，日志记录是否规范，便于问题追踪。
10. 检查Commits信息的清晰性与准确性：检查提交信息是否清晰、准确，是否便于后续维护和协作。


要求：
1. 简洁明了，只指出重要问题
2. 每个问题控制在3-4句话内
3. 优化建议要具体可执行
4. 如果代码质量良好，简单说明即可
5. 避免过度解释和冗长描述

输出格式（Markdown），不要出现任何包裹：

## 📝 评审总结
[一句话简短总结代码质量（100字以内），关注重点问题]

## 🔍 发现的问题
[如果有问题，用简短条目列出，没有问题则写"未发现明显问题"]

## 💡 优化建议
[针对问题的具体建议，没有则写"代码质量良好"]

代码变更如下：
$CODE_PLACEHOLDER""",
            description = "后端代码评审"
        )

        val FE_TEMPLATE = PromptTemplate(
            name = "前端代码评审",
            template = """你是一位前端开发工程师，负责审查前端代码的质量、性能和安全性。本次任务是对员工的代码进行审查，具体要求如下：
1. 检查代码是否符合前端开发规范，包括HTML、CSS、JavaScript等。
2. 检查代码是否存在性能问题，如页面加载速度、资源占用等。
3. 检查代码是否存在安全问题，如XSS、CSRF、SQL注入等。
4. 检查代码是否存在可维护性问题，如代码重复、冗余、注释不足等。
5. 检查代码是否存在可扩展性问题，如代码结构是否清晰、模块是否合理划分等。
6. 检查 Props、data、computed、methods 等属性的使用是否合理，是否避免在 data 中声明函数或复杂对象。


要求：
1. 简洁明了，只指出重要问题
2. 每个问题控制在3-4句话内
3. 优化建议要具体可执行
4. 如果代码质量良好，简单说明即可
5. 避免过度解释和冗长描述

输出格式（Markdown），不要出现任何包裹：

## 📝 评审总结
[一句话简短总结代码质量（100字以内），关注重点问题]

## 🔍 发现的问题
[如果有问题，用简短条目列出，没有问题则写"未发现明显问题"]

## 💡 优化建议
[针对问题的具体建议，没有则写"代码质量良好"]
//按要求按条目描述问题和优化建议

代码变更如下：
$CODE_PLACEHOLDER""",
            description = "前端代码评审"
        )

        val DOC_TEMPLATE = PromptTemplate(
            name = "开发手册评审",
            template = """你是一位资深的软件开发文档撰写专家，专注于文档审查。本次任务是对员工的文档进行审查，具体要求如下：
1. 内容规范
     术语统一：专业术语、缩写、命名风格保持一致。
     背景说明：每个模块或功能前有简要背景和作用说明。
     详细描述：对功能、接口、参数、返回值、异常、边界情况等进行详细说明。
     示例丰富：提供典型的代码示例、输入输出样例、场景说明。
     注意事项：列出易错点、限制条件、最佳实践等。
     统一格式：标题、正文、代码块、表格、图片等格式统一，层级分明。
2. 表达规范
     语言简洁准确：避免歧义，表达清晰。
     中英文规范：中文文档用简体中文，英文缩写需首次出现时注明全称。
     代码注释：代码块内注释简明，复杂说明单独列出。
     图文并茂：适当配图辅助说明，图片需有标题和说明。
3. 技术规范
    接口文档：包括接口路径、方法、参数、返回值、异常、示例等。
    配置说明：涉及配置项需详细说明含义、默认值、可选项。
    依赖说明：列出依赖的第三方库、服务、环境等。
    安全与性能：涉及安全、性能的地方需特别说明。

要求：
1. 简洁明了，只指出重要问题
2. 每个问题控制在3-4句话内
3. 优化建议要具体可执行
4. 如果代码质量良好，简单说明即可
5. 避免过度解释和冗长描述

输出格式（Markdown），不要出现任何包裹：

## 📝 评审总结
[一句话简短总结代码质量（100字以内），关注重点问题]

## 🔍 发现的问题
[如果有问题，用简短条目列出，没有问题则写"未发现明显问题"]

## 💡 优化建议
[针对问题的具体建议，没有则写"代码质量良好"]


代码变更如下：
$CODE_PLACEHOLDER""",
            description = "开发手册评审"
        )
    }

    fun formatWithCode(code: String): String {
        return template.replace(CODE_PLACEHOLDER, code)
    }
    
    fun isValid(): Boolean {
        return name.isNotBlank() && 
               template.isNotBlank() && 
               template.contains(CODE_PLACEHOLDER)
    }
}