package com.etrx.codereviewer.model

/**
 * Template configuration for code review prompts
 */
data class PromptTemplate(
    val name: String,
    val template: String,
    val description: String = "",
    val isDefault: Boolean = false
) {
    companion object {
        const val CODE_PLACEHOLDER = "{code}"

        val DEFAULT_TEMPLATE = PromptTemplate(
            name = "简洁代码评审",
            template = """对以下代码变更进行快速评审，重点关注关键问题。按照输出要求返回内容。不要返回思考过程。不要返回思考过程。

评审要求：
1. 简洁明了，只指出重要问题
2. 每个问题控制在5-6句话内
3. 优化建议要具体可执行
4. 如果代码质量良好，简单说明即可
5. 避免过度解释和冗长描述
6. 要返回思考过程。


输出模板如下：

## 📝 评审总结
[3-4 句话简短总结代码质量（200字以内），关注重点问题]

## 🔍 发现的问题
[如果有问题，按下面的方式列出，没有问题则写"未发现明显问题"]

### [问题标题]
[问题详解与优化建议]

## 💡 优化建议
[针对问题的建议总结，没有则写"代码质量良好"]

代码变更：
$CODE_PLACEHOLDER""",
            description = "快速简洁的代码评审，专注关键问题",
            isDefault = true
        )

        val DETAILED_TEMPLATE = PromptTemplate(
            name = "详细代码评审",
            template = """请对以下代码变更进行详细的代码审查，关注代码质量、安全性、性能、最佳实践等方面。请提供具体的改进建议。不要返回思考过程。不要返回思考过程。

输出模板如下：

## 📝 评审总结
[3-4 句话简短总结代码质量（200字以内），关注重点问题]

## 🔍 发现的问题
[如果有问题，按下面的方式列出，没有问题则写"未发现明显问题"]

### [问题标题]
[问题详解与优化建议]

## 💡 优化建议
[针对问题的建议总结，没有则写"代码质量良好"]


代码变更：
$CODE_PLACEHOLDER""",
            description = "传统详细的代码评审，适合需要全面分析的场景"
        )

        val BE_TEMPLATE = PromptTemplate(
            name = "后端代码评审",
            template = """你是一位资深的软件开发工程师，专注于代码的规范性、功能性、安全性和稳定性。本次任务是对员工的代码进行审查，按照输出要求返回内容。不要返回思考过程。不要返回思考过程。
            
审查要求如下：
1. 检查是否遵循统一的代码规范（如阿里Java开发手册），类、方法、变量命名是否规范、语义清晰，缩进、空格、注释等格式是否统一。
2. 检查包结构是否合理，分层是否清晰，是否存在单体过大、职责不清的类或方法，是否有重复代码，是否合理抽象和复用。
3. 检查Controller层接口参数、返回值是否规范，是否有统一的响应结构，是否有必要的接口文档注释（如Swagger），且不做业务逻辑处理。
4. 检查Service层是否只处理业务逻辑，事务管理是否合理，是否有事务边界，业务异常是否有统一处理。
5. 检查SQL语句是否安全、性能合理，是否防止SQL注入。
6. 分析代码的性能表现，评估是否存在资源浪费或性能瓶颈。
7. 检查是否防止常见安全漏洞（如XSS、CSRF、SQL注入等），日志中是否避免敏感信息泄露。
8. 检查是否有缓存机制，热点数据是否合理缓存，是否有异步处理、限流、降级等措施，是否有批量处理、分页查询等优化。
9. 检查代码是否易读、易维护，是否有必要的注释，日志记录是否规范，便于问题追踪。
10. 检查Commits信息的清晰性与准确性：检查提交信息是否清晰、准确，是否便于后续维护和协作。
11. 优化建议要具体可执行
12. 如果代码质量良好，简单说明即可
13. 避免过度解释和冗长描述
14. 不要返回思考过程。不要返回思考过程。

输出模板如下：

## 📝 评审总结
[3-4 句话简短总结代码质量（200字以内），关注重点问题]

## 🔍 发现的问题
[如果有问题，按下面的方式列出，没有问题则写"未发现明显问题"]

### [问题标题]
[问题详解与优化建议]

## 💡 优化建议
[针对问题的建议总结，没有则写"代码质量良好"]

代码变更如下：
$CODE_PLACEHOLDER""",
            description = "后端代码评审"
        )

        val FE_TEMPLATE = PromptTemplate(
            name = "前端代码评审",
            template = """你是一位前端开发工程师，负责审查前端代码的质量、性能和安全性。本次任务是对员工的代码进行审查，按照输出要求返回内容。不要返回思考过程。不要返回思考过程。

审查要求如下：
1. 检查代码是否符合前端开发规范，包括HTML、CSS、JavaScript等。
2. 检查代码是否存在性能问题，如页面加载速度、资源占用等。
3. 检查代码是否存在安全问题，如XSS、CSRF、SQL注入等。
4. 检查代码是否存在可维护性问题，如代码重复、冗余、注释不足等。
5. 检查代码是否存在可扩展性问题，如代码结构是否清晰、模块是否合理划分等。
6. 检查 Props、data、computed、methods 等属性的使用是否合理，是否避免在 data 中声明函数或复杂对象。
7. 优化建议要具体可执行
8. 如果代码质量良好，简单说明即可
9. 不要返回思考过程。不要返回思考过程。

输出要求：
格式使用Markdown语法，不要出现代码包裹，不要返回思考过程。

输出模板如下：

## 📝 评审总结
[3-4 句话简短总结代码质量（200字以内），关注重点问题]

## 🔍 发现的问题
[如果有问题，按下面的方式列出，没有问题则写"未发现明显问题"]

### [问题标题]
[问题详解与优化建议]

## 💡 优化建议
[针对问题的建议总结，没有则写"代码质量良好"]


代码变更如下：
$CODE_PLACEHOLDER""",
            description = "前端代码评审"
        )

        val DOC_TEMPLATE = PromptTemplate(
            name = "开发手册评审",
            template = """你是一位前端开发工程师，负责审查前端代码的质量、性能和安全性。本次任务是对员工的代码进行审查，按照输出要求返回内容。不要返回思考过程。

审查要求如下：
1. 检查代码是否符合前端开发规范，包括HTML、CSS、JavaScript等。
2. 检查代码是否存在性能问题，如页面加载速度、资源占用等。
3. 检查代码是否存在安全问题，如XSS、CSRF、SQL注入等。
4. 检查代码是否存在可维护性问题，如代码重复、冗余、注释不足等。
5. 检查代码是否存在可扩展性问题，如代码结构是否清晰、模块是否合理划分等。
6. 检查 Props、data、computed、methods 等属性的使用是否合理，是否避免在 data 中声明函数或复杂对象。
7. 优化建议要具体可执行
8. 如果代码质量良好，简单说明即可
9. 避免过度解释和冗长描述
10. 不要返回思考过程。

输出要求：
格式使用Markdown语法，不要出现代码包裹，不要返回思考过程。

输出模板如下：

## 📝 评审总结
[3-4 句话简短总结代码质量（200字以内），关注重点问题]

## 🔍 发现的问题
[如果有问题，按下面的方式列出，没有问题则写"未发现明显问题"]

### [问题标题]
[问题详解与优化建议]

## 💡 优化建议
[针对问题的建议总结，没有则写"代码质量良好"]


代码变更如下：
$CODE_PLACEHOLDER""",
            description = "开发手册评审"
        )
    }

    fun formatWithCode(code: String): String {
        return template.replace(CODE_PLACEHOLDER, code)
    }
    
    fun isValid(): Boolean {
        return name.isNotBlank() && 
               template.isNotBlank() && 
               template.contains(CODE_PLACEHOLDER)
    }
}